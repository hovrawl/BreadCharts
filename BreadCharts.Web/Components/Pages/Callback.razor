@page "/callback"
@using BreadCharts.Core.Services
@using BreadCharts.Web.Components.Account
@using BreadCharts.Web.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject SpotifyAuthService SpotifyAuthService
@inject UserManager<ApplicationUser> UserManager

@rendermode InteractiveServer

<p>Linking your Spotify account...</p>
<FluentProgress></FluentProgress>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private ApplicationUser? _user;
    private string? _redirectTo;
    private bool _navigated;

   
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await AuthenticationStateTask;
        var principal = authState.User;

        if (principal?.Identity?.IsAuthenticated == true && !SpotifyAuthService.Authed)
        {
            _user = await UserManager.GetUserAsync(principal);

            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("code", out var code) && !string.IsNullOrEmpty(code))
            {
                try
                {
                    var authed = await SpotifyAuthService.ChallengeCallback(_user!.Id, code!);
                    _redirectTo = authed ? "/" : "/error";
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Token exchange failed: {ex.Message}");
                    _redirectTo = "/error";
                }
            }
        }
        else
        {
            // Redirect to home
            _redirectTo = "/";
            // Optional: choose a sensible fallback
            // _redirectTo = "Identity/Account/Login";
            // await InvokeAsync(StateHasChanged);
        }
        
        if (!_navigated && _redirectTo is not null)
        {
            _navigated = true;
            NavigationManager.NavigateTo(_redirectTo, replace: true);
        }
    }

}